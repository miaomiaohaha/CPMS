<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  
           http://www.springframework.org/schema/context  
           http://www.springframework.org/schema/context/spring-context-3.2.xsd  
           http://www.springframework.org/schema/aop  
           http://www.springframework.org/schema/aop/spring-aop-3.2.xsd  
           http://www.springframework.org/schema/tx   
           http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
	<!-- <context:annotation-config/>的简化配置：注册AutowiredAnnotationBeanPostProcessor、CommonAnnotationBeanPostProcessor、 
		PersistenceAnnotationBeanPostProcessor以及RequiredAnnotationBeanPostProcessor这 
		4 个BeanPostProcessor。 使用<context:component-scan>配置项其实也包含了自动注入上述processor的功能，因此可以移除 
		<context:annotation-config/> -->
	<!-- 服务器启动时的加载配置文件的顺序为web.xml——>root-context.xml(Spring的配置文件)——>servlet-context.xml(SpringMVC的配置文件)，由于root-context.xml配置文件中Controller会先进行扫描装配，但是此时service还没有进行事务增强处理，得到的将是原样的Service（没有经过事务加强处理，故而没有事务处理能力） -->
	<!-- 确保先扫描Service -->
	<context:component-scan base-package="org.dengying">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 用来解析Java Properties属性文件值，并提供在spring配置期间替换使用属性值 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<!-- location：只有一个properties配置文件 locations：有多个properties配置文件，其下使用<list><value></value></list> 
			形式指定各配置文件 -->
		<property name="location">
			<value>classpath:config/jdbc.properties</value>
		</property>
	</bean>


	<!-- 声明式事务处理 -->
	<aop:config>
	    <aop:pointcut expression="execution(* org.dengying.*.*.service.*.*(..))" id="busi"/>
	    <aop:advisor advice-ref="txAdvice" pointcut-ref="busi"/>
	</aop:config>
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	    <property name="dataSource" ref="dataSource"></property>
	</bean>
	<tx:advice id="txAdvice">
	    <tx:attributes>
	        <tx:method name="save*" propagation="REQUIRED" isolation="DEFAULT"/>
	        <tx:method name="add*"/>
	        <tx:method name="insert*"/>
	        <tx:method name="update*"/>
	        <tx:method name="modify*"/>
	        <tx:method name="delete*"/>
	        <tx:method name="remove*"/>
	        <tx:method name="drop*"/>
	        <tx:method name="list*"/>
	        <tx:method name="get*" read-only="true"/>
	        <tx:method name="*"/>
	    </tx:attributes>
	</tx:advice>
	
	<!-- 使用apachedbcp数据源配置，并从jdbc.properties文件中加载各参数 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 连接池启动时的初始值 -->
		<property name="initialSize" value="10" />
		<!-- 连接池的最大值 -->
		<property name="maxActive" value="100" />
		<!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分， 一直减少到maxIdle为止 -->
		<property name="maxIdle" value="30" />
		<!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
		<property name="minIdle" value="10" />
		<!-- 最大等待毫秒数, 单位： ms, 超过时间会出错误信息 -->
		<property name="maxWait">
			<value>12000000</value>
		</property>
	</bean>
	<!-- mybatis的sqlSessionFactory配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 指定mybatis的配置文件信息 -->
		<property name="configLocation">
			<value>classpath:config/mybatis-config.xml</value>
		</property>
	</bean>

	<!-- 查找类路径下的映射器并自动将它们创建成MapperFactoryBean没有必要去指定SqlSessionFactory或 SqlSessionTemplate, 
		因为MapperScannerConfigurer将会创建MapperFactoryBean,之后自动装配。 但是如果你使用了一个以上的 DataSource,那 
		么自动装配可能会失效，此时使用 sqlSessionFactoryBeanName或sqlSessionTemplateBeanName 属性来设置正确的bean名称，value属性在这里替代通常的ref: 
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" /> -->
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="org.dengying.login.dao" />
	</bean> 
	
	 <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="org.dengying.personnal.dao" />
	</bean>
	
	 <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="org.dengying.sys.dao" />
	</bean>
	
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="org.dengying.user.dao" />
	</bean>
		
</beans>